Topics:

        Collections
			- List
			- Set
            - Queue
			- Iterable


Elements: 	5, 0, 10, 8, 25, 5, 0

List = [5, 0, 10, 8, 25, 5, 0]


Data Structures:
	Array
	Collection
	Map


Collection (I): size is dynamic, supports non-primitives ONLY

		1. List (I): Has Index Number, Allows Duplicate

				1.1 ArrayList: Array based class
							   Accessing/searching the elements are faster

				1.2 LinkedList: Node based class (doubly linked list)
								Insertion & deletion of elements are faster

				1.3 Vector: Same as ArrayList but synchronized
							Is Synchronized ==> Thread-safety

				1.3.1 Stack: Same as ArrayList but synchronized
							Last-In-First-Out (LIFO) ===> pop()


		2. Set (I): Does not have index number, Does not allow duplicates

				2.1 HashSet (C): Order is random, accepts null

				2.1.1 LinkedHashSet (C): Keeps the insertion order, accepts null

				2.2 TreeSet (C): keeps the sorted order, does not accept null



		3. Queue (I) :  Does not have index number, Allow duplicates. FIFO

                    	poll(): returns & removes the first inserted object from the Queue

                       	3.1 PriorityQueue (C): order is random, does not accept null

                       	3.2 ArrayDequeue (C): keeps the insertion order, does not accept null

                       	3.3 LinkedList (C): keeps the insertion order, accepts null, Has index number


Synchronized: multiple threads are being executed one thread at a time

			advantage: thread-safety
			disadvantage: slower


Process: execution instance of program application

Thread: A sequence of execution within a process


Creating custom Thread in java:
		1. by inheriting Thread Class
		2. by inheriting Runnable Interface

Multi-threading:
	Multiple thread objects are executed at the same time

Multitasking:
		two or more process are running
